package job

import (
	"github.com/stretchr/testify/assert"
	"testing"
)

// A minimal empty pdf.  Generated using Ruby's prawn:
//
//   Prawn::Document.new.render_file('/tmp/blank.pdf')
//
var decodedExpectation = []byte{
	0x25, 0x50, 0x44, 0x46, 0x2d, 0x31, 0x2e, 0x33, 0x0a, 0x25, 0xff, 0xff, 0xff,
	0xff, 0x0a, 0x31, 0x20, 0x30, 0x20, 0x6f, 0x62, 0x6a, 0x0a, 0x3c, 0x3c, 0x20,
	0x2f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x3c, 0x66, 0x65, 0x66,
	0x66, 0x30, 0x30, 0x35, 0x30, 0x30, 0x30, 0x37, 0x32, 0x30, 0x30, 0x36, 0x31,
	0x30, 0x30, 0x37, 0x37, 0x30, 0x30, 0x36, 0x65, 0x3e, 0x0a, 0x2f, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x20, 0x3c, 0x66, 0x65, 0x66, 0x66, 0x30,
	0x30, 0x35, 0x30, 0x30, 0x30, 0x37, 0x32, 0x30, 0x30, 0x36, 0x31, 0x30, 0x30,
	0x37, 0x37, 0x30, 0x30, 0x36, 0x65, 0x3e, 0x0a, 0x3e, 0x3e, 0x0a, 0x65, 0x6e,
	0x64, 0x6f, 0x62, 0x6a, 0x0a, 0x32, 0x20, 0x30, 0x20, 0x6f, 0x62, 0x6a, 0x0a,
	0x3c, 0x3c, 0x20, 0x2f, 0x54, 0x79, 0x70, 0x65, 0x20, 0x2f, 0x43, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x0a, 0x2f, 0x50, 0x61, 0x67, 0x65, 0x73, 0x20, 0x33,
	0x20, 0x30, 0x20, 0x52, 0x0a, 0x3e, 0x3e, 0x0a, 0x65, 0x6e, 0x64, 0x6f, 0x62,
	0x6a, 0x0a, 0x33, 0x20, 0x30, 0x20, 0x6f, 0x62, 0x6a, 0x0a, 0x3c, 0x3c, 0x20,
	0x2f, 0x54, 0x79, 0x70, 0x65, 0x20, 0x2f, 0x50, 0x61, 0x67, 0x65, 0x73, 0x0a,
	0x2f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x31, 0x0a, 0x2f, 0x4b, 0x69, 0x64,
	0x73, 0x20, 0x5b, 0x35, 0x20, 0x30, 0x20, 0x52, 0x5d, 0x0a, 0x3e, 0x3e, 0x0a,
	0x65, 0x6e, 0x64, 0x6f, 0x62, 0x6a, 0x0a, 0x34, 0x20, 0x30, 0x20, 0x6f, 0x62,
	0x6a, 0x0a, 0x3c, 0x3c, 0x20, 0x2f, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x20,
	0x34, 0x0a, 0x3e, 0x3e, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x0a, 0x71,
	0x0a, 0x51, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x0a, 0x65, 0x6e, 0x64, 0x6f, 0x62, 0x6a, 0x0a, 0x35, 0x20, 0x30, 0x20, 0x6f,
	0x62, 0x6a, 0x0a, 0x3c, 0x3c, 0x20, 0x2f, 0x54, 0x79, 0x70, 0x65, 0x20, 0x2f,
	0x50, 0x61, 0x67, 0x65, 0x0a, 0x2f, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20,
	0x33, 0x20, 0x30, 0x20, 0x52, 0x0a, 0x2f, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x42,
	0x6f, 0x78, 0x20, 0x5b, 0x30, 0x20, 0x30, 0x20, 0x36, 0x31, 0x32, 0x2e, 0x30,
	0x20, 0x37, 0x39, 0x32, 0x2e, 0x30, 0x5d, 0x0a, 0x2f, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x20, 0x34, 0x20, 0x30, 0x20, 0x52, 0x0a, 0x2f, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x20, 0x3c, 0x3c, 0x20, 0x2f,
	0x50, 0x72, 0x6f, 0x63, 0x53, 0x65, 0x74, 0x20, 0x5b, 0x2f, 0x50, 0x44, 0x46,
	0x20, 0x2f, 0x54, 0x65, 0x78, 0x74, 0x20, 0x2f, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x42, 0x20, 0x2f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x20, 0x2f, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x49, 0x5d, 0x0a, 0x3e, 0x3e, 0x0a, 0x3e, 0x3e, 0x0a, 0x65,
	0x6e, 0x64, 0x6f, 0x62, 0x6a, 0x0a, 0x78, 0x72, 0x65, 0x66, 0x0a, 0x30, 0x20,
	0x36, 0x0a, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20,
	0x36, 0x35, 0x35, 0x33, 0x35, 0x20, 0x66, 0x20, 0x0a, 0x30, 0x30, 0x30, 0x30,
	0x30, 0x30, 0x30, 0x30, 0x31, 0x35, 0x20, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20,
	0x6e, 0x20, 0x0a, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x39,
	0x20, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x6e, 0x20, 0x0a, 0x30, 0x30, 0x30,
	0x30, 0x30, 0x30, 0x30, 0x31, 0x35, 0x38, 0x20, 0x30, 0x30, 0x30, 0x30, 0x30,
	0x20, 0x6e, 0x20, 0x0a, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x32, 0x31,
	0x35, 0x20, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x6e, 0x20, 0x0a, 0x30, 0x30,
	0x30, 0x30, 0x30, 0x30, 0x30, 0x32, 0x36, 0x38, 0x20, 0x30, 0x30, 0x30, 0x30,
	0x30, 0x20, 0x6e, 0x20, 0x0a, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x0a,
	0x3c, 0x3c, 0x20, 0x2f, 0x53, 0x69, 0x7a, 0x65, 0x20, 0x36, 0x0a, 0x2f, 0x52,
	0x6f, 0x6f, 0x74, 0x20, 0x32, 0x20, 0x30, 0x20, 0x52, 0x0a, 0x2f, 0x49, 0x6e,
	0x66, 0x6f, 0x20, 0x31, 0x20, 0x30, 0x20, 0x52, 0x0a, 0x3e, 0x3e, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x78, 0x72, 0x65, 0x66, 0x0a, 0x34, 0x32, 0x32, 0x0a,
	0x25, 0x25, 0x45, 0x4f, 0x46, 0x0a,
}

// The Base64 representation of the above file as generated by the following:
//
//   Base64.encode64(Zlib::deflate(File.read(pdf)))
//
var encoded = `
eJx9UU1PwkAQve+vmEuPsh/tFkkIB1ASokYEb4TDSqdYA13dLgn653W2rdgE
4h462dn35r03jeY30yvZi1n0TYdJEGBf3thwCHzi0HjrYJhjnguhhRB9JUQq
qfap4ojxubPZYYP/gkYjhmUWpqrO9OfPdyQN483ObmmQ2WIFMQEWHUJ8Rqhx
jE/sofQgGb8rsgpWOvDWHWLSId5jufWvkITnylOoPftgTyxA22tL0hfVgjeH
pNaY4w+YFWZsj7AS1Eil6gnoD+i7DrZKT9AKkga7wMoe3IaShZm0rM0SPaw4
LZ0k8OiBz/akMW7rpK2zOstfnKPDnJEYE6cDqdaxhhxOPUn+65fy1JNicN7T
12c9dYGr0g7OO1Ps0NWrWRZfSFb4wloPqgk6K3ML8vfvVd44X3tOlGJRdPs4
ZT9Ep6Gu`

func TestDecode(t *testing.T) {
	decoded, err := decodeEmbeddedData(encoded)
	assert.Nil(t, err)
	assert.Equal(t, decoded, decodedExpectation)
}
